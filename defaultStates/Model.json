{"shaders":{"vertex":{"source":"#version 300 es\n\n//vertex position in world coordinates\nin vec3 vertex_worldSpace;\n//surface normal at the vertex in world coordinates\nin vec3 normal_worldSpace;\n//texture coordinates at that vertex\nin vec2 textureCoordinate_input;\n\n//model Matrix (Identity in our case)\nuniform mat4 mMatrix;\n//view Matrix\nuniform mat4 vMatrix;\n//projection Matrix\nuniform mat4 pMatrix;\n\n//main program for each vertex\nvoid main() {\n  vec4 vertex_camSpace = vMatrix * mMatrix * vec4(vertex_worldSpace, 1.0);\n  gl_Position = pMatrix * vertex_camSpace;\n}"},"fragment":{"source":"#version 300 es\n\n//for better performance less precision\nprecision highp float;\nout vec4 fragColor;\n\n//main program for each fragment = pixel candidate\nvoid main() {\n  fragColor = vec4(1.0, 0.0, 0.0, 1.0);\n}"}},"uniforms":{"value":{"mMatrix":{"attachment":"Model Matrix"},"vMatrix":{"attachment":"View Matrix"},"pMatrix":{"attachment":"Projection Matrix"}}}}